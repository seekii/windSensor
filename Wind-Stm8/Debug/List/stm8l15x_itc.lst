###############################################################################
#
# IAR C/C++ Compiler V2.10.2.149 for STM8                 07/Dec/2016  10:10:37
# Copyright 2010-2014 IAR Systems AB.
#
#    Source file  =  
#        F:\share\gitHub\windSensor\Wind-Stm8\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c
#    Command line =  
#        F:\share\gitHub\windSensor\Wind-Stm8\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c
#        -e -Ol --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --debug --code_model small --data_model medium -o
#        F:\share\gitHub\windSensor\Wind-Stm8\Debug\Obj\ --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8smn.h" -D STM8L15X_MD -lCN
#        F:\share\gitHub\windSensor\Wind-Stm8\Debug\List\ --diag_suppress
#        Pe177,Pe550 -I
#        F:\share\gitHub\windSensor\Wind-Stm8\Project\Discover\inc\ -I
#        F:\share\gitHub\windSensor\Wind-Stm8\Libraries\STM8L15x_StdPeriph_Driver\inc\
#        --vregs 16
#    List file    =  
#        F:\share\gitHub\windSensor\Wind-Stm8\Debug\List\stm8l15x_itc.lst
#    Object file  =  
#        F:\share\gitHub\windSensor\Wind-Stm8\Debug\Obj\stm8l15x_itc.o
#
###############################################################################

F:\share\gitHub\windSensor\Wind-Stm8\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_itc.c
      4            * @author  MCD Application Team
      5            * @version V1.4.0
      6            * @date    09/24/2010
      7            * @brief   This file provides all the ITC firmware functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm8l15x_itc.h"
     23          
     24          /** @addtogroup STM8L15x_StdPeriph_Driver
     25            * @{
     26            */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          
     35          /** @addtogroup ITC_Private_Functions
     36            * @{
     37            */
     38          
     39          /**
     40            * @brief  Utility function used to read CC register.
     41            * @param  None
     42            * @retval CPU CC register value
     43            */

   \                                 In section .near_func.text, align 1
     44          uint8_t ITC_GetCPUCC(void)
     45          {
     46          #ifdef _COSMIC_
     47            _asm("push cc");
     48            _asm("pop a");
     49            return; /* Ignore compiler warning, the returned value is in A register */
     50          #elif defined _RAISONANCE_ /* _RAISONANCE_ */
     51            return _getCC_();
     52          #else /* _IAR_ */
     53            asm("push cc");
   \                     ITC_GetCPUCC:
   \   000000 8A           push cc
     54            asm("pop a");
   \   000001 84           pop a
     55            return 0;
   \   000002 4F           CLR       A
   \   000003 81           RET
     56          #endif /* _COSMIC_*/
     57          }
     58          
     59          /**
     60            * @}
     61            */
     62          
     63          /** @addtogroup ITC_Public_Functions
     64            * @{
     65            */
     66          
     67          /**
     68            * @brief  Deinitializes the ITC registers to their default reset value.
     69            * @param  None
     70            * @retval None
     71           */

   \                                 In section .near_func.text, align 1
     72          void ITC_DeInit(void)
     73          {
     74            ITC->ISPR1 = ITC_SPRX_RESET_VALUE;
   \                     ITC_DeInit:
   \   000000 35 FF 7F70   MOV       L:0x7f70, #0xff
     75            ITC->ISPR2 = ITC_SPRX_RESET_VALUE;
   \   000004 35 FF 7F71   MOV       L:0x7f71, #0xff
     76            ITC->ISPR3 = ITC_SPRX_RESET_VALUE;
   \   000008 35 FF 7F72   MOV       L:0x7f72, #0xff
     77            ITC->ISPR4 = ITC_SPRX_RESET_VALUE;
   \   00000C 35 FF 7F73   MOV       L:0x7f73, #0xff
     78            ITC->ISPR5 = ITC_SPRX_RESET_VALUE;
   \   000010 35 FF 7F74   MOV       L:0x7f74, #0xff
     79            ITC->ISPR6 = ITC_SPRX_RESET_VALUE;
   \   000014 35 FF 7F75   MOV       L:0x7f75, #0xff
     80            ITC->ISPR7 = ITC_SPRX_RESET_VALUE;
   \   000018 35 FF 7F76   MOV       L:0x7f76, #0xff
     81            ITC->ISPR8 = ITC_SPRX_RESET_VALUE;
   \   00001C 35 FF 7F77   MOV       L:0x7f77, #0xff
     82          }
   \   000020 81           RET
     83          
     84          /**
     85            * @brief  Gets the interrupt software priority bits (I1, I0) value from CPU CC register.
     86            * @param  None
     87            * @retval The interrupt software priority bits value.
     88           */

   \                                 In section .near_func.text, align 1
     89          uint8_t ITC_GetSoftIntStatus(void)
     90          {
     91            return ((uint8_t)(ITC_GetCPUCC() & CPU_SOFT_INT_DISABLED));
   \                     ITC_GetSoftIntStatus:
   \   000000 CD ....      CALL      L:ITC_GetCPUCC
   \   000003 A4 28        AND       A, #0x28
   \   000005 81           RET
     92          }
     93          
     94          /**
     95            * @brief  Gets the software priority of the specified interrupt source.
     96            * @param  IRQn : Specifies the peripheral interrupt source.
     97            * @retval ITC_PriorityLevel_TypeDef : Specifies the software priority of the interrupt source.
     98           */

   \                                 In section .near_func.text, align 1
     99          ITC_PriorityLevel_TypeDef ITC_GetSoftwarePriority(IRQn_TypeDef IRQn)
    100          {
   \                     ITC_GetSoftwarePriority:
   \   000000 B7 ..        LD        S:?b0, A
    101            uint8_t Value = 0;
   \   000002 3F ..        CLR       S:?b2
    102            uint8_t Mask = 0;
   \   000004 3F ..        CLR       S:?b3
    103          
    104            /* Check function parameters */
    105            assert_param(IS_ITC_IRQ(IRQn));
    106          
    107            /* Define the mask corresponding to the bits position in the SPR register */
    108            Mask = (uint8_t)(0x03U << ((IRQn % 4U) * 2U));
   \   000006 A6 04        LD        A, #0x4
   \   000008 5F           CLRW      X
   \   000009 01           RRWA      X, A
   \   00000A B6 ..        LD        A, S:?b0
   \   00000C 02           RLWA      X, A
   \   00000D 62           DIV       X, A
   \   00000E 35 02 ....   MOV       S:?b1, #0x2
   \   000012 97           LD        XL, A
   \   000013 B6 ..        LD        A, S:?b1
   \   000015 42           MUL       X, A
   \   000016 9F           LD        A, XL
   \   000017 AE 0003      LDW       X, #0x3
   \   00001A CD ....      CALL      L:?sll16_x_x_a
   \   00001D 9F           LD        A, XL
   \   00001E B7 ..        LD        S:?b3, A
    109          
    110            switch (IRQn)
   \   000020 B6 ..        LD        A, S:?b0
   \   000022 4A           DEC       A
   \   000023 27 56        JREQ      L:??ITC_GetSoftwarePriority_0
   \   000025 4A           DEC       A
   \   000026 27 53        JREQ      L:??ITC_GetSoftwarePriority_0
   \   000028 4A           DEC       A
   \   000029 27 50        JREQ      L:??ITC_GetSoftwarePriority_0
   \   00002B 4A           DEC       A
   \   00002C 27 56        JREQ      L:??ITC_GetSoftwarePriority_1
   \   00002E 4A           DEC       A
   \   00002F 27 53        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000031 4A           DEC       A
   \   000032 27 50        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000034 4A           DEC       A
   \   000035 27 4D        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000037 4A           DEC       A
   \   000038 27 53        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00003A 4A           DEC       A
   \   00003B 27 50        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00003D 4A           DEC       A
   \   00003E 27 4D        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000040 4A           DEC       A
   \   000041 27 4A        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000043 4A           DEC       A
   \   000044 27 50        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000046 4A           DEC       A
   \   000047 27 4D        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000049 4A           DEC       A
   \   00004A 27 4A        JREQ      L:??ITC_GetSoftwarePriority_3
   \   00004C 4A           DEC       A
   \   00004D 27 47        JREQ      L:??ITC_GetSoftwarePriority_3
   \   00004F 4A           DEC       A
   \   000050 27 4D        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000052 4A           DEC       A
   \   000053 27 4A        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000055 4A           DEC       A
   \   000056 27 47        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000058 4A           DEC       A
   \   000059 27 44        JREQ      L:??ITC_GetSoftwarePriority_4
   \   00005B 4A           DEC       A
   \   00005C 27 4A        JREQ      L:??ITC_GetSoftwarePriority_5
   \   00005E 4A           DEC       A
   \   00005F 27 47        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000061 4A           DEC       A
   \   000062 27 44        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000064 4A           DEC       A
   \   000065 27 41        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000067 4A           DEC       A
   \   000068 27 47        JREQ      L:??ITC_GetSoftwarePriority_6
   \   00006A 4A           DEC       A
   \   00006B 27 44        JREQ      L:??ITC_GetSoftwarePriority_6
   \   00006D 4A           DEC       A
   \   00006E 27 41        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000070 4A           DEC       A
   \   000071 27 3E        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000073 4A           DEC       A
   \   000074 27 44        JREQ      L:??ITC_GetSoftwarePriority_7
   \   000076 4A           DEC       A
   \   000077 27 41        JREQ      L:??ITC_GetSoftwarePriority_7
   \   000079 20 46        JRA       L:??ITC_GetSoftwarePriority_8
    111            {
    112              case FLASH_IRQn:
    113              case DMA1_CHANNEL0_1_IRQn:
    114              case DMA1_CHANNEL2_3_IRQn:
    115                Value = (uint8_t)(ITC->ISPR1 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_0:
   \   00007B B6 ..        LD        A, S:?b3
   \   00007D C4 7F70      AND       A, L:0x7f70
   \   000080 B7 ..        LD        S:?b2, A
    116                break;
   \   000082 20 3D        JRA       L:??ITC_GetSoftwarePriority_8
    117          
    118              case EXTIE_F_PVD_IRQn:
    119          #ifdef STM8L15X_MD
    120              case RTC_IRQn:
    121              case EXTIB_IRQn:
    122              case EXTID_IRQn:
    123          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    124              case RTC_CSSLSE_IRQn:
    125              case EXTIB_G_IRQn:
    126              case EXTID_H_IRQn:
    127          #endif  /* STM8L15X_MD */
    128                Value = (uint8_t)(ITC->ISPR2 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_1:
   \   000084 B6 ..        LD        A, S:?b3
   \   000086 C4 7F71      AND       A, L:0x7f71
   \   000089 B7 ..        LD        S:?b2, A
    129                break;
   \   00008B 20 34        JRA       L:??ITC_GetSoftwarePriority_8
    130          
    131              case EXTI0_IRQn:
    132              case EXTI1_IRQn:
    133              case EXTI2_IRQn:
    134              case EXTI3_IRQn:
    135                Value = (uint8_t)(ITC->ISPR3 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_2:
   \   00008D B6 ..        LD        A, S:?b3
   \   00008F C4 7F72      AND       A, L:0x7f72
   \   000092 B7 ..        LD        S:?b2, A
    136                break;
   \   000094 20 2B        JRA       L:??ITC_GetSoftwarePriority_8
    137          
    138              case EXTI4_IRQn:
    139              case EXTI5_IRQn:
    140              case EXTI6_IRQn:
    141              case EXTI7_IRQn:
    142                Value = (uint8_t)(ITC->ISPR4 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_3:
   \   000096 B6 ..        LD        A, S:?b3
   \   000098 C4 7F73      AND       A, L:0x7f73
   \   00009B B7 ..        LD        S:?b2, A
    143                break;
   \   00009D 20 22        JRA       L:??ITC_GetSoftwarePriority_8
    144          
    145          
    146              case SWITCH_CSS_BREAK_DAC_IRQn:
    147              case ADC1_COMP_IRQn:
    148          #ifdef STM8L15X_MD
    149              case LCD_IRQn:
    150              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    151          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    152              case LCD_AES_IRQn:
    153              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    154          #endif  /* STM8L15X_MD */
    155                Value = (uint8_t)(ITC->ISPR5 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_4:
   \   00009F B6 ..        LD        A, S:?b3
   \   0000A1 C4 7F74      AND       A, L:0x7f74
   \   0000A4 B7 ..        LD        S:?b2, A
    156                break;
   \   0000A6 20 19        JRA       L:??ITC_GetSoftwarePriority_8
    157          
    158              case TIM1_UPD_OVF_TRG_IRQn:
    159          #ifdef STM8L15X_MD
    160              case TIM2_CC_IRQn:
    161              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    162              case TIM3_CC_IRQn:
    163          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    164              case TIM2_CC_USART2_RX_IRQn:
    165              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    166              case TIM3_CC_USART3_RX_IRQn:
    167          #endif  /* STM8L15X_MD */
    168                Value = (uint8_t)(ITC->ISPR6 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_5:
   \   0000A8 B6 ..        LD        A, S:?b3
   \   0000AA C4 7F75      AND       A, L:0x7f75
   \   0000AD B7 ..        LD        S:?b2, A
    169                break;
   \   0000AF 20 10        JRA       L:??ITC_GetSoftwarePriority_8
    170          
    171              case TIM1_CC_IRQn:
    172              case TIM4_UPD_OVF_TRG_IRQn:
    173              case SPI1_IRQn:
    174          #ifdef STM8L15X_MD
    175              case USART1_TX_IRQn:
    176          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    177              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    178          #endif  /* STM8L15X_MD */
    179                Value = (uint8_t)(ITC->ISPR7 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_6:
   \   0000B1 B6 ..        LD        A, S:?b3
   \   0000B3 C4 7F76      AND       A, L:0x7f76
   \   0000B6 B7 ..        LD        S:?b2, A
    180                break;
   \   0000B8 20 07        JRA       L:??ITC_GetSoftwarePriority_8
    181          
    182          #ifdef STM8L15X_MD
    183              case USART1_RX_IRQn:
    184              case I2C1_IRQn:
    185          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    186              case USART1_RX_TIM5_CC_IRQn:
    187              case I2C1_SPI2_IRQn:
    188          #endif  /* STM8L15X_MD */
    189                Value = (uint8_t)(ITC->ISPR8 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_7:
   \   0000BA B6 ..        LD        A, S:?b3
   \   0000BC C4 7F77      AND       A, L:0x7f77
   \   0000BF B7 ..        LD        S:?b2, A
    190                break;
    191          
    192              default:
    193                break;
    194            }
    195          
    196            Value >>= (uint8_t)((IRQn % 4u) * 2u);
   \                     ??ITC_GetSoftwarePriority_8:
   \   0000C1 A6 04        LD        A, #0x4
   \   0000C3 5F           CLRW      X
   \   0000C4 01           RRWA      X, A
   \   0000C5 B6 ..        LD        A, S:?b0
   \   0000C7 02           RLWA      X, A
   \   0000C8 62           DIV       X, A
   \   0000C9 35 02 ....   MOV       S:?b0, #0x2
   \   0000CD 97           LD        XL, A
   \   0000CE B6 ..        LD        A, S:?b0
   \   0000D0 42           MUL       X, A
   \   0000D1 41           EXG       A, XL
   \   0000D2 B7 ..        LD        S:?b0, A
   \   0000D4 41           EXG       A, XL
   \   0000D5 B6 ..        LD        A, S:?b2
   \   0000D7 CD ....      CALL      L:?srl8_a_a_b0
   \   0000DA B7 ..        LD        S:?b2, A
    197          
    198            return((ITC_PriorityLevel_TypeDef)Value);
   \   0000DC B6 ..        LD        A, S:?b2
   \   0000DE 81           RET
    199          
    200          }
    201          
    202          /**
    203            * @brief  Sets the software priority of the specified interrupt source.
    204            * @note   - The modification of the software priority is only possible when
    205            *         the interrupts are disabled.
    206            *         - The normal behavior is to disable the interrupt before calling
    207            *         this function, and re-enable it after.
    208            *         - The priority level 0 cannot be set (see product specification
    209            *         for more details).
    210            * @param  IRQn : Specifies the peripheral interrupt source.
    211            * @param  ITC_PriorityLevel : Specifies the software priority value to set,
    212            *         can be a value of @ref  ITC_PriorityLevel_TypeDef .
    213            * @retval None
    214            */

   \                                 In section .near_func.text, align 1
    215          void ITC_SetSoftwarePriority(IRQn_TypeDef IRQn, ITC_PriorityLevel_TypeDef ITC_PriorityLevel)
    216          {
   \                     ITC_SetSoftwarePriority:
   \   000000 B7 ..        LD        S:?b1, A
   \   000002 45 .. ..     MOV       S:?b2, S:?b0
    217            uint8_t Mask = 0;
   \   000005 3F ..        CLR       S:?b4
    218            uint8_t NewPriority = 0;
   \   000007 3F ..        CLR       S:?b3
    219          
    220            /* Check function parameters */
    221            assert_param(IS_ITC_IRQ(IRQn));
    222            assert_param(IS_ITC_PRIORITY(ITC_PriorityLevel));
    223          
    224            /* Check if interrupts are disabled */
    225            assert_param(IS_ITC_INTERRUPTS_DISABLED);
    226          
    227            /* Define the mask corresponding to the bits position in the SPR register */
    228            /* The mask is reversed in order to clear the 2 bits after more easily */
    229            Mask = (uint8_t)(~(uint8_t)(0x03U << ((IRQn % 4U) * 2U)));
   \   000009 A6 04        LD        A, #0x4
   \   00000B 5F           CLRW      X
   \   00000C 01           RRWA      X, A
   \   00000D B6 ..        LD        A, S:?b1
   \   00000F 02           RLWA      X, A
   \   000010 62           DIV       X, A
   \   000011 35 02 ....   MOV       S:?b0, #0x2
   \   000015 97           LD        XL, A
   \   000016 B6 ..        LD        A, S:?b0
   \   000018 42           MUL       X, A
   \   000019 9F           LD        A, XL
   \   00001A AE 0003      LDW       X, #0x3
   \   00001D CD ....      CALL      L:?sll16_x_x_a
   \   000020 9F           LD        A, XL
   \   000021 43           CPL       A
   \   000022 B7 ..        LD        S:?b4, A
    230            /* Define the new priority to write */
    231            NewPriority = (uint8_t)((uint8_t)(ITC_PriorityLevel) << ((IRQn % 4U) * 2U));
   \   000024 A6 04        LD        A, #0x4
   \   000026 5F           CLRW      X
   \   000027 01           RRWA      X, A
   \   000028 B6 ..        LD        A, S:?b1
   \   00002A 02           RLWA      X, A
   \   00002B 62           DIV       X, A
   \   00002C 35 02 ....   MOV       S:?b0, #0x2
   \   000030 97           LD        XL, A
   \   000031 B6 ..        LD        A, S:?b0
   \   000033 42           MUL       X, A
   \   000034 9F           LD        A, XL
   \   000035 5F           CLRW      X
   \   000036 41           EXG       A, XL
   \   000037 B6 ..        LD        A, S:?b2
   \   000039 41           EXG       A, XL
   \   00003A CD ....      CALL      L:?sll16_x_x_a
   \   00003D 9F           LD        A, XL
   \   00003E B7 ..        LD        S:?b3, A
    232          
    233            switch (IRQn)
   \   000040 B6 ..        LD        A, S:?b1
   \   000042 4A           DEC       A
   \   000043 27 55        JREQ      L:??ITC_SetSoftwarePriority_0
   \   000045 4A           DEC       A
   \   000046 27 52        JREQ      L:??ITC_SetSoftwarePriority_0
   \   000048 4A           DEC       A
   \   000049 27 4F        JREQ      L:??ITC_SetSoftwarePriority_0
   \   00004B 4A           DEC       A
   \   00004C 27 5D        JREQ      L:??ITC_SetSoftwarePriority_1
   \   00004E 4A           DEC       A
   \   00004F 27 5A        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000051 4A           DEC       A
   \   000052 27 57        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000054 4A           DEC       A
   \   000055 27 54        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000057 4A           DEC       A
   \   000058 27 62        JREQ      L:??ITC_SetSoftwarePriority_2
   \   00005A 4A           DEC       A
   \   00005B 27 5F        JREQ      L:??ITC_SetSoftwarePriority_2
   \   00005D 4A           DEC       A
   \   00005E 27 5C        JREQ      L:??ITC_SetSoftwarePriority_2
   \   000060 4A           DEC       A
   \   000061 27 59        JREQ      L:??ITC_SetSoftwarePriority_2
   \   000063 4A           DEC       A
   \   000064 27 67        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000066 4A           DEC       A
   \   000067 27 64        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000069 4A           DEC       A
   \   00006A 27 61        JREQ      L:??ITC_SetSoftwarePriority_3
   \   00006C 4A           DEC       A
   \   00006D 27 5E        JREQ      L:??ITC_SetSoftwarePriority_3
   \   00006F 4A           DEC       A
   \   000070 27 6C        JREQ      L:??ITC_SetSoftwarePriority_4
   \   000072 4A           DEC       A
   \   000073 27 69        JREQ      L:??ITC_SetSoftwarePriority_4
   \   000075 4A           DEC       A
   \   000076 27 66        JREQ      L:??ITC_SetSoftwarePriority_4
   \   000078 4A           DEC       A
   \   000079 27 63        JREQ      L:??ITC_SetSoftwarePriority_4
   \   00007B 4A           DEC       A
   \   00007C 27 71        JREQ      L:??ITC_SetSoftwarePriority_5
   \   00007E 4A           DEC       A
   \   00007F 27 6E        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000081 4A           DEC       A
   \   000082 27 6B        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000084 4A           DEC       A
   \   000085 27 68        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000087 4A           DEC       A
   \   000088 27 76        JREQ      L:??ITC_SetSoftwarePriority_6
   \   00008A 4A           DEC       A
   \   00008B 27 73        JREQ      L:??ITC_SetSoftwarePriority_6
   \   00008D 4A           DEC       A
   \   00008E 27 70        JREQ      L:??ITC_SetSoftwarePriority_6
   \   000090 4A           DEC       A
   \   000091 27 6D        JREQ      L:??ITC_SetSoftwarePriority_6
   \   000093 4A           DEC       A
   \   000094 27 7B        JREQ      L:??ITC_SetSoftwarePriority_7
   \   000096 4A           DEC       A
   \   000097 27 78        JREQ      L:??ITC_SetSoftwarePriority_7
   \   000099 81           RET
    234            {
    235              case FLASH_IRQn:
    236              case DMA1_CHANNEL0_1_IRQn:
    237              case DMA1_CHANNEL2_3_IRQn:
    238                ITC->ISPR1 &= Mask;
   \                     ??ITC_SetSoftwarePriority_0:
   \   00009A B6 ..        LD        A, S:?b4
   \   00009C C4 7F70      AND       A, L:0x7f70
   \   00009F C7 7F70      LD        L:0x7f70, A
    239                ITC->ISPR1 |= NewPriority;
   \   0000A2 B6 ..        LD        A, S:?b3
   \   0000A4 CA 7F70      OR        A, L:0x7f70
   \   0000A7 C7 7F70      LD        L:0x7f70, A
    240                break;
   \   0000AA 81           RET
    241          
    242              case EXTIE_F_PVD_IRQn:
    243          #ifdef STM8L15X_MD
    244              case RTC_IRQn:
    245              case EXTIB_IRQn:
    246              case EXTID_IRQn:
    247          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    248              case RTC_CSSLSE_IRQn:
    249              case EXTIB_G_IRQn:
    250              case EXTID_H_IRQn:
    251          #endif  /* STM8L15X_MD */
    252                ITC->ISPR2 &= Mask;
   \                     ??ITC_SetSoftwarePriority_1:
   \   0000AB B6 ..        LD        A, S:?b4
   \   0000AD C4 7F71      AND       A, L:0x7f71
   \   0000B0 C7 7F71      LD        L:0x7f71, A
    253                ITC->ISPR2 |= NewPriority;
   \   0000B3 B6 ..        LD        A, S:?b3
   \   0000B5 CA 7F71      OR        A, L:0x7f71
   \   0000B8 C7 7F71      LD        L:0x7f71, A
    254                break;
   \   0000BB 81           RET
    255          
    256              case EXTI0_IRQn:
    257              case EXTI1_IRQn:
    258              case EXTI2_IRQn:
    259              case EXTI3_IRQn:
    260                ITC->ISPR3 &= Mask;
   \                     ??ITC_SetSoftwarePriority_2:
   \   0000BC B6 ..        LD        A, S:?b4
   \   0000BE C4 7F72      AND       A, L:0x7f72
   \   0000C1 C7 7F72      LD        L:0x7f72, A
    261                ITC->ISPR3 |= NewPriority;
   \   0000C4 B6 ..        LD        A, S:?b3
   \   0000C6 CA 7F72      OR        A, L:0x7f72
   \   0000C9 C7 7F72      LD        L:0x7f72, A
    262                break;
   \   0000CC 81           RET
    263          
    264              case EXTI4_IRQn:
    265              case EXTI5_IRQn:
    266              case EXTI6_IRQn:
    267              case EXTI7_IRQn:
    268                ITC->ISPR4 &= Mask;
   \                     ??ITC_SetSoftwarePriority_3:
   \   0000CD B6 ..        LD        A, S:?b4
   \   0000CF C4 7F73      AND       A, L:0x7f73
   \   0000D2 C7 7F73      LD        L:0x7f73, A
    269                ITC->ISPR4 |= NewPriority;
   \   0000D5 B6 ..        LD        A, S:?b3
   \   0000D7 CA 7F73      OR        A, L:0x7f73
   \   0000DA C7 7F73      LD        L:0x7f73, A
    270                break;
   \   0000DD 81           RET
    271          
    272              case SWITCH_CSS_BREAK_DAC_IRQn:
    273              case ADC1_COMP_IRQn:
    274          #ifdef STM8L15X_MD
    275              case LCD_IRQn:
    276              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    277          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    278              case LCD_AES_IRQn:
    279              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    280          #endif  /* STM8L15X_MD */
    281                ITC->ISPR5 &= Mask;
   \                     ??ITC_SetSoftwarePriority_4:
   \   0000DE B6 ..        LD        A, S:?b4
   \   0000E0 C4 7F74      AND       A, L:0x7f74
   \   0000E3 C7 7F74      LD        L:0x7f74, A
    282                ITC->ISPR5 |= NewPriority;
   \   0000E6 B6 ..        LD        A, S:?b3
   \   0000E8 CA 7F74      OR        A, L:0x7f74
   \   0000EB C7 7F74      LD        L:0x7f74, A
    283                break;
   \   0000EE 81           RET
    284          
    285              case TIM1_UPD_OVF_TRG_IRQn:
    286          #ifdef STM8L15X_MD
    287              case TIM2_CC_IRQn:
    288              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    289              case TIM3_CC_IRQn:
    290          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    291              case TIM2_CC_USART2_RX_IRQn:
    292              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    293              case TIM3_CC_USART3_RX_IRQn:
    294          #endif  /* STM8L15X_MD */
    295                ITC->ISPR6 &= Mask;
   \                     ??ITC_SetSoftwarePriority_5:
   \   0000EF B6 ..        LD        A, S:?b4
   \   0000F1 C4 7F75      AND       A, L:0x7f75
   \   0000F4 C7 7F75      LD        L:0x7f75, A
    296                ITC->ISPR6 |= NewPriority;
   \   0000F7 B6 ..        LD        A, S:?b3
   \   0000F9 CA 7F75      OR        A, L:0x7f75
   \   0000FC C7 7F75      LD        L:0x7f75, A
    297                break;
   \   0000FF 81           RET
    298          
    299          
    300              case TIM1_CC_IRQn:
    301              case TIM4_UPD_OVF_TRG_IRQn:
    302              case SPI1_IRQn:
    303          #ifdef STM8L15X_MD
    304              case USART1_TX_IRQn:
    305          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    306              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    307          #endif  /* STM8L15X_MD */
    308                ITC->ISPR7 &= Mask;
   \                     ??ITC_SetSoftwarePriority_6:
   \   000100 B6 ..        LD        A, S:?b4
   \   000102 C4 7F76      AND       A, L:0x7f76
   \   000105 C7 7F76      LD        L:0x7f76, A
    309                ITC->ISPR7 |= NewPriority;
   \   000108 B6 ..        LD        A, S:?b3
   \   00010A CA 7F76      OR        A, L:0x7f76
   \   00010D C7 7F76      LD        L:0x7f76, A
    310                break;
   \   000110 81           RET
    311          
    312          #ifdef STM8L15X_MD
    313              case USART1_RX_IRQn:
    314              case I2C1_IRQn:
    315          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP)
    316              case USART1_RX_TIM5_CC_IRQn:
    317              case I2C1_SPI2_IRQn:
    318          #endif  /* STM8L15X_MD */
    319                ITC->ISPR8 &= Mask;
   \                     ??ITC_SetSoftwarePriority_7:
   \   000111 B6 ..        LD        A, S:?b4
   \   000113 C4 7F77      AND       A, L:0x7f77
   \   000116 C7 7F77      LD        L:0x7f77, A
    320                ITC->ISPR8 |= NewPriority;
   \   000119 B6 ..        LD        A, S:?b3
   \   00011B CA 7F77      OR        A, L:0x7f77
   \   00011E C7 7F77      LD        L:0x7f77, A
    321                break;
    322          
    323              default:
    324                break;
    325            }
    326          }
   \   000121 81           RET
    327          
    328          /**
    329            * @}
    330            */
    331          
    332          /**
    333            * @}
    334            */
    335          
    336          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      33  ITC_DeInit
       4  ITC_GetCPUCC
       6  ITC_GetSoftIntStatus
     223  ITC_GetSoftwarePriority
     290  ITC_SetSoftwarePriority

 
 556 bytes in section .near_func.text
 
 556 bytes of CODE memory

Errors: none
Warnings: none
